//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/ModularPlayer_PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ModularPlayer_PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ModularPlayer_PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ModularPlayer_PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""ModularPlayer_InputActionMap"",
            ""id"": ""c83ceada-04c7-43aa-b179-4b8b37c91d9d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7f6ce487-a6e2-4018-93a8-13db0c46583b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""5ff3cce1-62f9-49eb-b738-7b80554ea8a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sneak"",
                    ""type"": ""Button"",
                    ""id"": ""41ae5c48-2abb-4aef-8a73-9e2cc02a32bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""5bea755a-e2e0-4183-81ee-37bd5f948bbd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleSneak"",
                    ""type"": ""Button"",
                    ""id"": ""9992d73e-b9c6-4957-b753-4bb5bd1278d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookX"",
                    ""type"": ""Value"",
                    ""id"": ""a055a5a5-4ade-4ccd-96d5-407290c58058"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookY"",
                    ""type"": ""Value"",
                    ""id"": ""d358bea3-2844-4532-90ea-9021018acd5d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""04a73dd9-29d1-4650-b291-aaa95ac6de33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52ebcc64-afb4-404d-8aa1-bde66b507b84"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b951dc08-34c7-4f69-9c33-6baabcd02b48"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""cb3d0db2-f7aa-4c76-86d9-be65f7af97aa"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""428a444e-5ec6-43e8-89dc-fd020a52211e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cdf6c358-81bb-43a1-a966-209df70a8da5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e0f18841-4980-4a23-b1b1-987606476eba"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""08109fde-fdf3-4bc6-ab7a-fe7495b5a588"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d1416ace-1766-4624-9df3-ac60e9c42a10"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6aa0607f-974c-49bd-bdad-c6f2fe0fcedb"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Sneak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1b6492a-7cb5-46cb-8661-a59bc14ffa55"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f02bdcc-fe6c-475a-a316-e7e5931e1436"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25b74c80-8431-4ac3-a486-4ef0cfc62c8a"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ToggleSneak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1789fae7-fb4f-452b-bb53-b24ded399b8e"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LookX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0ae05fe-f7d4-4e4a-8e3b-0da733ea7ad0"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LookY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22900e76-7f21-4f4a-a8d0-ace668562def"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ModularPlayer_InputActionMap
        m_ModularPlayer_InputActionMap = asset.FindActionMap("ModularPlayer_InputActionMap", throwIfNotFound: true);
        m_ModularPlayer_InputActionMap_Movement = m_ModularPlayer_InputActionMap.FindAction("Movement", throwIfNotFound: true);
        m_ModularPlayer_InputActionMap_Jump = m_ModularPlayer_InputActionMap.FindAction("Jump", throwIfNotFound: true);
        m_ModularPlayer_InputActionMap_Sneak = m_ModularPlayer_InputActionMap.FindAction("Sneak", throwIfNotFound: true);
        m_ModularPlayer_InputActionMap_Run = m_ModularPlayer_InputActionMap.FindAction("Run", throwIfNotFound: true);
        m_ModularPlayer_InputActionMap_ToggleSneak = m_ModularPlayer_InputActionMap.FindAction("ToggleSneak", throwIfNotFound: true);
        m_ModularPlayer_InputActionMap_LookX = m_ModularPlayer_InputActionMap.FindAction("LookX", throwIfNotFound: true);
        m_ModularPlayer_InputActionMap_LookY = m_ModularPlayer_InputActionMap.FindAction("LookY", throwIfNotFound: true);
        m_ModularPlayer_InputActionMap_Interact = m_ModularPlayer_InputActionMap.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ModularPlayer_InputActionMap
    private readonly InputActionMap m_ModularPlayer_InputActionMap;
    private List<IModularPlayer_InputActionMapActions> m_ModularPlayer_InputActionMapActionsCallbackInterfaces = new List<IModularPlayer_InputActionMapActions>();
    private readonly InputAction m_ModularPlayer_InputActionMap_Movement;
    private readonly InputAction m_ModularPlayer_InputActionMap_Jump;
    private readonly InputAction m_ModularPlayer_InputActionMap_Sneak;
    private readonly InputAction m_ModularPlayer_InputActionMap_Run;
    private readonly InputAction m_ModularPlayer_InputActionMap_ToggleSneak;
    private readonly InputAction m_ModularPlayer_InputActionMap_LookX;
    private readonly InputAction m_ModularPlayer_InputActionMap_LookY;
    private readonly InputAction m_ModularPlayer_InputActionMap_Interact;
    public struct ModularPlayer_InputActionMapActions
    {
        private @ModularPlayer_PlayerInputs m_Wrapper;
        public ModularPlayer_InputActionMapActions(@ModularPlayer_PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_ModularPlayer_InputActionMap_Movement;
        public InputAction @Jump => m_Wrapper.m_ModularPlayer_InputActionMap_Jump;
        public InputAction @Sneak => m_Wrapper.m_ModularPlayer_InputActionMap_Sneak;
        public InputAction @Run => m_Wrapper.m_ModularPlayer_InputActionMap_Run;
        public InputAction @ToggleSneak => m_Wrapper.m_ModularPlayer_InputActionMap_ToggleSneak;
        public InputAction @LookX => m_Wrapper.m_ModularPlayer_InputActionMap_LookX;
        public InputAction @LookY => m_Wrapper.m_ModularPlayer_InputActionMap_LookY;
        public InputAction @Interact => m_Wrapper.m_ModularPlayer_InputActionMap_Interact;
        public InputActionMap Get() { return m_Wrapper.m_ModularPlayer_InputActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ModularPlayer_InputActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IModularPlayer_InputActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_ModularPlayer_InputActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ModularPlayer_InputActionMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Sneak.started += instance.OnSneak;
            @Sneak.performed += instance.OnSneak;
            @Sneak.canceled += instance.OnSneak;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @ToggleSneak.started += instance.OnToggleSneak;
            @ToggleSneak.performed += instance.OnToggleSneak;
            @ToggleSneak.canceled += instance.OnToggleSneak;
            @LookX.started += instance.OnLookX;
            @LookX.performed += instance.OnLookX;
            @LookX.canceled += instance.OnLookX;
            @LookY.started += instance.OnLookY;
            @LookY.performed += instance.OnLookY;
            @LookY.canceled += instance.OnLookY;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IModularPlayer_InputActionMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Sneak.started -= instance.OnSneak;
            @Sneak.performed -= instance.OnSneak;
            @Sneak.canceled -= instance.OnSneak;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @ToggleSneak.started -= instance.OnToggleSneak;
            @ToggleSneak.performed -= instance.OnToggleSneak;
            @ToggleSneak.canceled -= instance.OnToggleSneak;
            @LookX.started -= instance.OnLookX;
            @LookX.performed -= instance.OnLookX;
            @LookX.canceled -= instance.OnLookX;
            @LookY.started -= instance.OnLookY;
            @LookY.performed -= instance.OnLookY;
            @LookY.canceled -= instance.OnLookY;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IModularPlayer_InputActionMapActions instance)
        {
            if (m_Wrapper.m_ModularPlayer_InputActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IModularPlayer_InputActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_ModularPlayer_InputActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ModularPlayer_InputActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ModularPlayer_InputActionMapActions @ModularPlayer_InputActionMap => new ModularPlayer_InputActionMapActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IModularPlayer_InputActionMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSneak(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnToggleSneak(InputAction.CallbackContext context);
        void OnLookX(InputAction.CallbackContext context);
        void OnLookY(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
